#ifndef FIGURES_H_
#define FIGURES_H_ 1

class King : public Piece {
 public:
  explicit King(int player) { this->player = player; }
  char get_piece_c() override { return 'k' + this->player * ('A' - 'a'); }
  int get_player() override { return this->player; }
  ~King() override = default;
};

class Rook : public Piece {
 public:
  explicit Rook(int player) { this->player = player; }
  char get_piece_c() override { return 'r' + this->player * ('A' - 'a'); }
  int get_player() override { return this->player; }
  ~Rook() override = default;
};

class Bishop : public Piece {
 public:
  explicit Bishop(int player) { this->player = player; }
  char get_piece_c() override { return 'b' + this->player * ('A' - 'a'); }
  int get_player() override { return this->player; }
  ~Bishop() override = default;
};

class Queen : public Piece {
 public:
  explicit Queen(int player) { this->player = player; }
  char get_piece_c() override { return 'q' + this->player * ('A' - 'a'); }
  int get_player() override { return this->player; }
  ~Queen() override = default;
};

class Knight : public Piece {
 public:
  explicit Knight(int player) { this->player = player; }
  char get_piece_c() override { return 'n' + this->player * ('A' - 'a'); }
  int get_player() override { return this->player; }
  ~Knight() override = default;
};

class Pawn : public Piece {
 public:
  explicit Pawn(int player) { this->player = player; }
  char get_piece_c() override { return 'p' + this->player * ('A' - 'a'); }
  int get_player() override { return this->player; }
  ~Pawn() override = default;
};

#endif // FIGURES_H_
