#ifndef CHESS_H_
#define CHESS_H_ 1

#include "./figures.h"

class Chess {
 public:
  explicit Chess(int num_of_players = 2, int turn = 1);
  Piece *get_piece_from_tile(char file, char rank);
  Chess print();
  Chess chessmove(char piece, char file_origin, char rank_origin, char file_outlet, char rank_outlet, bool capture);
  Chess undo();

 private:
  Piece *pieces[2][16];
  Piece *chessboard[8][8];
  int num_of_players = -1;
  int turn = -1;
  struct History {
    Piece *piece;
    bool au_passant;
    History() {
      this->piece = new Piece();
      this->au_passant = 0;
      this->chessboard = new Piece **[8];
      for (int i = 0; i < 8; ++i) this->chessboard[i] = new Piece *[8];
    }
    Piece ***chessboard = NULL;
    History *before = NULL;
  };
  History *history = new History();
};

Chess::Chess(int num_of_players, int turn) {
  for (int i = 0; i < 8; ++i)
    for (int j = 0; j < 8; ++j) this->chessboard[i][j] = new Piece();
  for (int i = 0; i < 8; ++i) {
    this->pieces[0][i + 8] = new Pawn(0);
    this->chessboard[i][6] = this->pieces[0][i + 8];
    this->pieces[1][i + 8] = new Pawn(1);
    this->chessboard[i][1] = this->pieces[1][i + 8];
  }
  for (int i = 0; i <= 1; ++i) {
    this->pieces[i][0] = new King(i);
    this->chessboard[4][7 - 7 * i] = this->pieces[i][0];
    this->pieces[i][1] = new Queen(i);
    this->chessboard[3][7 - 7 * i] = this->pieces[i][1];
    for (int j = 0; j <= 1; ++j) {
      this->pieces[i][2 + j] = new Rook(i);
      this->chessboard[j * 7][7 - 7 * i] = this->pieces[i][2 + j];
      this->pieces[i][4 + j] = new Bishop(i);
      this->chessboard[2 + j * 3][7 - 7 * i] = this->pieces[i][4 + j];
      this->pieces[i][6 + j] = new Knight(i);
      this->chessboard[1 + j * 5][7 - 7 * i] = this->pieces[i][6 + j];
    }
  }
  this->num_of_players = num_of_players;
  this->turn = turn;
}

Piece *Chess::get_piece_from_tile(char file, char rank) {
  if (file < 'a' || 'h' < file || rank < '1' || '9' < rank) return NULL;
  return this->chessboard[file - 'a'][rank - '1'];
}

Chess Chess::print() {
  for (int i = 7; i >= 0; --i) {
    for (int j = 0; j < 8; ++j) std::cout << this->chessboard[j][i]->get_piece_c();
    std::cout << std::endl;
  }
  return *this;
}

Chess Chess::chessmove(char piece, char file_origin, char rank_origin, char file_outlet, char rank_outlet,
                       bool capture) {
  Piece *origin = this->get_piece_from_tile(file_origin, rank_origin);
  Piece *outlet = this->get_piece_from_tile(file_outlet, rank_outlet);
  if (origin == NULL || outlet == NULL || origin->get_piece_c() != piece || this->turn != origin->get_player())
    return *this;
  if (this->history && this->history->before && this->history->before->piece->get_au_passant()) this->history->before->piece->set_au_passant(0);
  bool au_passant = capture && (std::tolower(origin->get_piece_c()) == 'p') && this->get_piece_from_tile(file_outlet, rank_origin)->get_au_passant();
  std::cout << "au_passant: " << au_passant << std::endl; 
  if ( ((capture == (outlet->get_piece_c() == ' ')) && !au_passant) || (capture && (outlet->get_player() == this->turn))) return *this;
  if (!origin->legal_move(this->chessboard, file_origin, rank_origin, file_outlet, rank_outlet, capture)) return *this;
  if (std::tolower(origin->get_piece_c()) == 'p') origin->set_au_passant(this->chessboard, file_origin, rank_origin, file_outlet, rank_outlet, capture);
  History *new_history = new History();
  new_history->piece = origin;
  new_history->au_passant = au_passant;
  for (int i = 0; i < 8; ++i)
    for (int j = 0; j < 8; ++j) new_history->chessboard[i][j] = this->chessboard[i][j];
  new_history->before = this->history;
  this->history = new_history;
  this->chessboard[file_outlet - 'a'][rank_outlet - '1'] = origin;
  this->chessboard[file_origin - 'a'][rank_origin - '1'] = new Piece();
  if (au_passant) this->chessboard[file_outlet - 'a'][rank_origin - '1'] = new Piece();
  this->turn = (this->turn + 1) % this->num_of_players;
  return *this;
}

Chess Chess::undo() {
  if (this->history->before == NULL) return *this;
  for (int i = 0; i < 8; ++i)
    for (int j = 0; j < 8; ++j) this->chessboard[i][j] = this->history->chessboard[i][j];
  this->history = this->history->before;
  if (this->history->au_passant) this->history->piece->set_au_passant(1);
  this->turn = (this->turn + 1) % this->num_of_players;
  return *this;
}

#endif // CHESS_H_

