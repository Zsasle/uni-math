# Snippets for braces
snippet "\$" "mathmode" rA
$ $1 $$0
endsnippet

# Snippte for environments
snippet "\\?begi?n?" "\begin{environment}" r
\begin{$1}
	$2
\end{$1}
$0

endsnippet
snippet "\\?begi?n?\*" "\begin{environment}[something]" r
\begin{$1}[$2]
	$3
\end{$1}
$0
endsnippet

# Snippet for fractions
snippet "\\?frac" "The LaTeX \frac{}{} command" r
\frac{ $1 }{ $2 } $0
endsnippet
snippet "(^|[^A-Za-z])ff" "LaTeX \frac{}{}" rA
`!p snip.rv = match.group(1)`\frac{ $1 }{ $2 } $0
endsnippet

# Snippet for sums
snippet "\\?sum" "The LaTeX \sum_{}^{} command" r
\sum_{$1}^{$2}$0
endsnippet
snippet "(^|[^A-Za-z])sss" "LaTeX \sum_{}^{}" rA
`!p snip.rv = match.group(1)`\sum_{$1}^{$2}$0
endsnippet

# Snippet for integrals
snippet "^\\?int" "The LaTeX \int_{}^{} command" r
\int_{$1}^{$2}$0
endsnippet
snippet "(^|[^A-Za-z])ii" "LaTeX \int_{}^{}" rA
`!p snip.rv = match.group(1)`\int_{$1}^{$2}$0
endsnippet

# Snippet for underbrace
snippet "\\?unde(rbrace)?" "The LaTeX \underbrace{}_{} command" ri
\underbrace{$1}_{$2}$0
endsnippet

# Snippet for underbrace
snippet "\\?over(set)?" "The LaTeX \overset{}{} command" ri
\overset{$1}{$2}$0
endsnippet

# Snippets for enums
snippet "^enum" "enumearet without label" r
\begin{enumerate}[label=$1]
	\item $2
\end{enumerate}
endsnippet

snippet "^enum((l|\*)|\[)" "enumearet with label" rA
\begin{enumerate}[label=$1]
	\item $2
\end{enumerate}
endsnippet

# Snippet for \left \right
snippet "(^|l)left" "\left\right" Ar
\left$1 $2 \right$1$0
endsnippet

# Snippet for _ and ^
snippet "([^^])__" "_{}" Ar
`!p snip.rv = match.group(1)`_{$1}$0
endsnippet

snippet "([^^])\^\^p" "^{}" Ar
`!p snip.rv = match.group(1)`^{$1}$0
endsnippet

global !p
def create_matrix_placeholders(snip):
	anon_snippet_body = ""
	# Get start and end line number of expanded snippet
	start = snip.snippet_start[0]
	end = snip.snippet_end[0]
  # Append current line into anonymous snippet
	for i in range(start, end + 1):
		anon_snippet_body += snip.buffer[i]
		anon_snippet_body += "" if i == end else "\n"
# Delete expanded snippet line till second to last line
	for i in range(start, end):
		del snip.buffer[start]
	# Empty last expanded snippet line while preserving the line
	snip.buffer[start] = ''
	# Expand anonymous snippet
	snip.expand_anon(anon_snippet_body)
endglobal

post_jump "create_matrix_placeholders(snip)"
snippet 'matr?i?x? (\d+) (\d+)' "LaTeX array" br
`!p
res = ""
placeholder = 1
for _ in range(0, int(match.group(1))):
	for _ in range(0, int(match.group(2)) - 1):
		res += f"${placeholder} & "
		placeholder += 1
	res += f"${placeholder} \\\\\\\\\n"
	placeholder += 1
snip.rv = res
`$0
endsnippet
